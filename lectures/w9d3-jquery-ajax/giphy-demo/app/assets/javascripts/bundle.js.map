{"version":3,"sources":["webpack://gifomatic/./frontend/gif_api_util.js","webpack://gifomatic/webpack/bootstrap","webpack://gifomatic/./frontend/giphy_lite.js"],"names":["GifApiUtil","newGifAJAX","$","ajax","method","url","saveGifAJAX","gifArg","data","gif","dataType","fetchSavedGifAJAX","titleArg","module","exports","require","setEventListeners","on","e","preventDefault","fetchNewGif","saveGif","fetchSavedGif","clearGif","then","res","images","preview_gif","appendGif","$input","title","val","$messages","success","response","text","setTimeout","empty","failure","errors","responseJSON","console","log","$gifDisplay","$newImage","newGifURL","append"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,aAAa;AACjBC,cAAY,sBAAW;AACrB;AACA;AACA,WAAOC,EAAEC,IAAF,CAAO;AACZC,cAAQ,KADI;AAEZC,WAAK;AAFO,KAAP,CAAP;AAID,GARgB;AASjBC,eAAa,qBAASC,MAAT,EAAiB;AAAE;AAC9B,WAAOL,EAAEC,IAAF,CAAO;AACZE,WAAK,OADO,EACE;AACdD,cAAQ,MAFI;AAGZI,YAAM;AACJC,aAAKF;AADD,OAHM;AAMZG,gBAAU;AANE,KAAP,CAAP;AAQD,GAlBgB;AAmBjBC,qBAAmB,2BAASC,QAAT,EAAmB;AACpC,WAAOV,EAAEC,IAAF,CAAO;AACZE,sBAAcO,QADF,EACc;AAC1BR,cAAQ,KAFI;AAGZM,gBAAU;AAHE,KAAP,CAAP;AAKD;AAzBgB,CAAnB;;AA4BAG,OAAOC,OAAP,GAAiBd,UAAjB,C;;;;;;UC5BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;ACtBA,IAAMA,aAAae,mBAAOA,CAAC,kDAAR,CAAnB;;AAEA;AACA,IAAMC,oBAAoB,SAApBA,iBAAoB,GAAM;AAC9Bd,IAAE,eAAF,EAAmBe,EAAnB,CAAsB,QAAtB,EAAgC,aAAK;AACnCC,MAAEC,cAAF;AACA;AACAC;AACD,GAJD;;AAMAlB,IAAE,gBAAF,EAAoBe,EAApB,CAAuB,QAAvB,EAAiC,aAAK;AACpCC,MAAEC,cAAF;AACA;AACAE;AACD,GAJD;;AAMAnB,IAAE,eAAF,EAAmBe,EAAnB,CAAsB,QAAtB,EAAgC,aAAK;AACnCC,MAAEC,cAAF;AACA;AACAG;AACD,GAJD;;AAMApB,IAAE,QAAF,EAAYe,EAAZ,CAAe,OAAf,EAAwB,YAAM;AAC5B;AACAM;AACD,GAHD;AAID,CAvBD;;AAyBArB,EAAEc,iBAAF;AACA;AACA;;;AAGA;;AAEA,IAAMI,cAAc,SAAdA,WAAc,GAAM;AACxB;AACApB,aAAWC,UAAX,GACGuB,IADH,CACQ,eAAO;AACX,QAAMnB,MAAMoB,IAAIjB,IAAJ,CAASkB,MAAT,CAAgBC,WAAhB,CAA4BtB,GAAxC;AACAuB,cAAUvB,GAAV;AACD,GAJH;AAKD,CAPD;;AASA,IAAMgB,UAAU,SAAVA,OAAU,IAAK;AACnB,MAAMQ,SAAS3B,EAAE,iBAAF,CAAf;AACA,MAAM4B,QAAQD,OAAOE,GAAP,EAAd;AACAF,SAAOE,GAAP,CAAW,EAAX;;AAEA;AACA;;AAEA;AACA,MAAMtB,MAAM;AACVqB,WAAOA,KADG;AAEVzB,SAAKH,EAAE,cAAF,EAAkBM,IAAlB,CAAuB,KAAvB;;AAGP;AALY,GAAZ,CAMA,IAAMwB,YAAY9B,EAAE,WAAF,CAAlB;;AAEA;AACA,MAAM+B,UAAU,SAAVA,OAAU,CAACC,QAAD,EAAc;AAC5BF,cAAUG,IAAV,CAAe,gBAAf;AACAC,eAAW;AAAA,aAAMJ,UAAUK,KAAV,EAAN;AAAA,KAAX,EAAoC,IAApC;AACD,GAHD;;AAKA;AACA,MAAMC,UAAU,SAAVA,OAAU,CAACC,MAAD,EAAY;AAC1BP,cAAUG,IAAV,CAAeI,OAAOC,YAAP,CAAoB,CAApB,CAAf;AACAJ,eAAW;AAAA,aAAMJ,UAAUK,KAAV,EAAN;AAAA,KAAX,EAAoC,IAApC;AACD,GAHD;;AAKA;AACArC,aAAWM,WAAX,CAAuBG,GAAvB,EACGe,IADH,CACQS,OADR,EACiBK,OADjB;AAED,CAhCD;;AAkCA,IAAMhB,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1B,MAAMO,SAAS3B,EAAE,gBAAF,CAAf;AACA,MAAM4B,QAAQD,OAAOE,GAAP,EAAd;AACAF,SAAOE,GAAP,CAAW,EAAX;AACA;AACA;AACA;;AAEA/B,aAAWW,iBAAX,CAA6BmB,KAA7B,EACGN,IADH,CAEI,UAACU,QAAD,EAAc;AACZN,cAAUM,SAAS7B,GAAnB;AACD,GAJL,EAKI,UAACkC,MAAD,EAAY;AACVE,YAAQC,GAAR,CAAY,gBAAZ;AACD,GAPL;AASD,CAjBD;;AAmBA,IAAMnB,WAAW,SAAXA,QAAW,GAAM;AACrB,MAAMoB,cAAczC,EAAE,cAAF,CAApB;AACAyC,cAAYN,KAAZ;AACA,SAAOM,WAAP;AACD,CAJD;;AAOA;;AAEA,IAAMf,YAAY,SAAZA,SAAY,YAAa;AAC7B;AACA,MAAMe,cAAczC,EAAE,cAAF,CAApB;AACAyC,cAAYN,KAAZ;;AAEA,MAAMO,YAAY1C,6BAA2B2C,SAA3B,QAAlB;AACAF,cAAYnC,IAAZ,CAAiB,KAAjB,EAAwBqC,SAAxB;AACAF,cAAYG,MAAZ,CAAmBF,SAAnB;AACD,CARD,C","file":"bundle.js","sourcesContent":["const GifApiUtil = {\n  newGifAJAX: function() {\n    // always explicitly return because it makes debugging easier\n    // explicitly returning whatever is returned by the ajax method. (a promise)\n    return $.ajax({\n      method: 'GET',\n      url: 'https://api.giphy.com/v1/gifs/random?api_key=3yvEbPRnIhHJhjKS9vBRQjQQDCHme7rh&rating=G&tag=banana',\n    });\n  },\n  saveGifAJAX: function(gifArg) { //expect gifArg to have keys of title and url\n    return $.ajax({\n      url: \"/gifs\", //Matching our rails routes\n      method: \"POST\",\n      data: {\n        gif: gifArg\n      },\n      dataType: 'JSON'\n    })\n  },\n  fetchSavedGifAJAX: function(titleArg) {\n    return $.ajax({\n      url: `/gifs/${titleArg}`, //Matching our custom rails route\n      method: 'GET',\n      dataType: 'JSON'\n    })\n  }\n};\n\nmodule.exports = GifApiUtil;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const GifApiUtil = require('./gif_api_util');\n\n// Install event listeners\nconst setEventListeners = () => {\n  $('#new-gif-form').on('submit', e => {\n    e.preventDefault();\n    // Fetch a new GIF\n    fetchNewGif();\n  });\n\n  $('#save-gif-form').on('submit', e => {\n    e.preventDefault();\n    // Save GIF\n    saveGif();\n  });\n\n  $('#old-gif-form').on('submit', e => {\n    e.preventDefault();\n    // Fetch saved GIF\n    fetchSavedGif();\n  });\n\n  $(\".clear\").on(\"click\", () => {\n    // Clear out GIF display\n    clearGif();\n  });\n};\n\n$(setEventListeners);\n// setEventListeners will run after the dom is fully loaded\n// it adds all of our event listeners after we're sure the elements are on the page\n\n\n// ------------- GIF event handlers - fetchNew, save, fetchSaved, and clear ---------------\n\nconst fetchNewGif = () => {\n  // Initiate AJAX call to GIPHY API, take response and put on the DOM\n  GifApiUtil.newGifAJAX()\n    .then(res => {\n      const url = res.data.images.preview_gif.url\n      appendGif(url)\n    })\n};\n\nconst saveGif = e => {\n  const $input = $('#save-gif-title');\n  const title = $input.val();\n  $input.val('');\n\n  // Initiate AJAX request to Rails backend, give a message if successful\n  // give an error if request was unsuccessful\n\n  // Create Gif arg to be passed through\n  const gif = {\n    title: title,\n    url: $('.gif-display').data('url')\n  }\n\n  // Grabbing h2 on root.html.erb\n  const $messages = $('.messages')\n\n  // Create success callback\n  const success = (response) => {\n    $messages.text('Gif was saved!')\n    setTimeout(() => $messages.empty(), 5000)\n  }\n\n  // Create failure callback\n  const failure = (errors) => {\n    $messages.text(errors.responseJSON[0])\n    setTimeout(() => $messages.empty(), 5000)\n  }\n\n  // Make API request\n  GifApiUtil.saveGifAJAX(gif)\n    .then(success, failure)\n};\n\nconst fetchSavedGif = () => {\n  const $input = $('#old-gif-query');\n  const title = $input.val();\n  $input.val('');\n  // Banana Shooter\n  // Initate AJAX request to Rails backend, add GIF to the DOM if successful\n  // show errors if request was unsuccessful\n\n  GifApiUtil.fetchSavedGifAJAX(title)\n    .then(\n      (response) => {\n        appendGif(response.url)\n      },\n      (errors) => {\n        console.log('Gif Not Found!')\n      }\n    )\n};\n\nconst clearGif = () => {\n  const $gifDisplay = $(\".gif-display\");\n  $gifDisplay.empty();\n  return $gifDisplay;\n};\n\n\n// ------------- Other helper functions ---------------\n\nconst appendGif = newGifURL => {\n  // Add gif to the display and keep track of its url\n  const $gifDisplay = $('.gif-display');\n  $gifDisplay.empty();\n\n  const $newImage = $(`<img class=\"gif\" src=\"${newGifURL}\">`);\n  $gifDisplay.data(\"url\", newGifURL);\n  $gifDisplay.append($newImage);\n};\n"],"sourceRoot":""}