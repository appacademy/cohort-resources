{"version":3,"sources":["webpack://gifomatic/./frontend/gif_api_util.js","webpack://gifomatic/webpack/bootstrap","webpack://gifomatic/./frontend/giphy_lite.js"],"names":["GifApiUtil","newGifAJAX","$","ajax","method","url","saveGifAJAX","gifArg","data","gif","fetchSavedGifAJAX","titleArg","module","exports","require","setEventListeners","on","e","preventDefault","fetchNewGif","saveGif","fetchSavedGif","clearGif","then","response","image_url","appendGif","$input","title","val","gifObj","$messages","success","text","setTimeout","empty","failure","error","responseJSON","fail","$gifDisplay","$newImage","newGifURL","append"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,aAAa;AACjBC,cAAY,sBAAW;AACrB;AACA;AACA,WAAOC,EAAEC,IAAF,CAAO;AACZC,cAAQ,KADI;AAEZC,WAAK;AAFO,KAAP,CAAP;AAID,GARgB;AASjBC,eAAa,qBAASC,MAAT,EAAiB;AAAE;AAC9B,WAAOL,EAAEC,IAAF,CAAO;AACZC,cAAQ,MADI;AAEZC,WAAK,OAFO;AAGZG,YAAM;AACJC,aAAKF;AACL;AACA;AACA;AACA;AALI;AAHM,KAAP,CAAP;AAWD,GArBgB;AAsBjBG,qBAAmB,2BAASC,QAAT,EAAmB;AACpC,WAAOT,EAAEC,IAAF,CAAO;AACZC,cAAQ,KADI;AAEZC,sBAAcM;AAFF,KAAP,CAAP;AAID;AA3BgB,CAAnB;;AA8BA;;AAEAC,OAAOC,OAAP,GAAiBb,UAAjB,C;;;;;;UChCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;ACtBA,IAAMA,aAAac,mBAAOA,CAAC,kDAAR,CAAnB;;AAEA;AACA,IAAMC,oBAAoB,SAApBA,iBAAoB,GAAM;AAC9Bb,IAAE,eAAF,EAAmBc,EAAnB,CAAsB,QAAtB,EAAgC,aAAK;AACnCC,MAAEC,cAAF;AACA;AACAC;AACD,GAJD;;AAMAjB,IAAE,gBAAF,EAAoBc,EAApB,CAAuB,QAAvB,EAAiC,aAAK;AACpCC,MAAEC,cAAF;AACA;AACAE,YAAQH,CAAR;AACD,GAJD;;AAMAf,IAAE,eAAF,EAAmBc,EAAnB,CAAsB,QAAtB,EAAgC,aAAK;AACnCC,MAAEC,cAAF;AACA;AACAG;AACD,GAJD;;AAMAnB,IAAE,QAAF,EAAYc,EAAZ,CAAe,OAAf,EAAwB,YAAM;AAC5B;AACAM;AACD,GAHD;AAID,CAvBD;;AAyBApB,EAAEa,iBAAF;AACA;AACA;;;AAGA;;AAEA,IAAMI,cAAc,SAAdA,WAAc,GAAM;AACxB;AACAnB,aAAWC,UAAX,GACGsB,IADH,CACQ,oBAAY;AAChB,QAAIlB,MAAMmB,SAAShB,IAAT,CAAciB,SAAxB;AACAC,cAAUrB,GAAV;AACD,GAJH;AAKD,CAPD;;AASA,IAAMe,UAAU,SAAVA,OAAU,IAAK;AACnB,MAAMO,SAASzB,EAAE,iBAAF,CAAf;AACA,MAAM0B,QAAQD,OAAOE,GAAP,EAAd;AACAF,SAAOE,GAAP,CAAW,EAAX;;AAEA;AACA;AACA,MAAIC,SAAS;AACXzB,SAAKH,EAAE,cAAF,EAAkBM,IAAlB,CAAuB,KAAvB,CADM;AAEXoB,WAAOA;AAFI,GAAb;;AAKA,MAAMG,YAAY7B,EAAE,WAAF,CAAlB;;AAEA,MAAI8B,UAAU,SAAVA,OAAU,CAACR,QAAD,EAAc;AAC1BO,cAAUE,IAAV,CAAe,qBAAf;AACAC,eAAW;AAAA,aAAMH,UAAUI,KAAV,EAAN;AAAA,KAAX,EAAoC,IAApC;AACD,GAHD;;AAKA,MAAIC,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAW;AACvBN,cAAUE,IAAV,CAAeI,MAAMC,YAAN,CAAmB,CAAnB,CAAf;AACAJ,eAAW;AAAA,aAAMH,UAAUI,KAAV,EAAN;AAAA,KAAX,EAAoC,IAApC;AACD,GAHD;;AAKAnC,aAAWM,WAAX,CAAuBwB,MAAvB,EACGP,IADH,CACQS,OADR,EACiBI,OADjB;AAEE;AACA;AACH,CA5BD;;AA8BA,IAAMf,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1B,MAAMM,SAASzB,EAAE,gBAAF,CAAf;AACA,MAAM0B,QAAQD,OAAOE,GAAP,EAAd;AACAF,SAAOE,GAAP,CAAW,EAAX;;AAEA;AACA;AACA7B,aAAWU,iBAAX,CAA6BkB,KAA7B,EACGL,IADH,CACQ,oBAAY;AAChBG,cAAUF,SAASnB,GAAnB;AACD,GAHH,EAIGkC,IAJH,CAIQ,iBAAS;AACb,QAAMR,YAAY7B,EAAE,WAAF,CAAlB;AACA6B,cAAUE,IAAV,CAAeI,MAAMC,YAAN,CAAmB,CAAnB,CAAf;AACAJ,eAAW;AAAA,aAAMH,UAAUI,KAAV,EAAN;AAAA,KAAX,EAAoC,IAApC;AACD,GARH;AASD,CAhBD;;AAkBA,IAAMb,WAAW,SAAXA,QAAW,GAAM;AACrB,MAAMkB,cAActC,EAAE,cAAF,CAApB;AACAsC,cAAYL,KAAZ;AACA,SAAOK,WAAP;AACD,CAJD;;AAOA;;AAEA,IAAMd,YAAY,SAAZA,SAAY,YAAa;AAC7B;AACA,MAAMc,cAActC,EAAE,cAAF,CAApB;AACAsC,cAAYL,KAAZ;;AAEA,MAAMM,YAAYvC,6BAA2BwC,SAA3B,QAAlB;AACAF,cAAYhC,IAAZ,CAAiB,KAAjB,EAAwBkC,SAAxB;AACAF,cAAYG,MAAZ,CAAmBF,SAAnB;AACD,CARD,C","file":"bundle.js","sourcesContent":["const GifApiUtil = {\n  newGifAJAX: function() {\n    // always explicitly return because it makes debugging easier\n    // explicitly returning whatever is returned by the ajax method. (a promise)\n    return $.ajax({\n      method: 'GET',\n      url: 'https://api.giphy.com/v1/gifs/random?api_key=9IfxO6R6fpEZMAdqdw66QUgQdPejVIAW&rating=G&tag=banana',\n    })\n  },\n  saveGifAJAX: function(gifArg) { //expect gifArg to have keys of title and url\n    return $.ajax({\n      method: 'POST',\n      url: '/gifs',\n      data: {\n        gif: gifArg\n        // gif: {\n        //   url: gifArg.url,\n        //   title: gifArg.title\n        // }\n      }\n    })\n  },\n  fetchSavedGifAJAX: function(titleArg) {\n    return $.ajax({\n      method: 'GET',\n      url: `/gifs/${titleArg}`,\n    })\n  }\n};\n\n// GifApiUtil.newGifAJAX().then(res => )\n\nmodule.exports = GifApiUtil;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const GifApiUtil = require('./gif_api_util');\n\n// Install event listeners\nconst setEventListeners = () => {\n  $('#new-gif-form').on('submit', e => {\n    e.preventDefault();\n    // Fetch a new GIF\n    fetchNewGif();\n  });\n\n  $('#save-gif-form').on('submit', e => {\n    e.preventDefault();\n    // Save GIF\n    saveGif(e);\n  });\n\n  $('#old-gif-form').on('submit', e => {\n    e.preventDefault();\n    // Fetch saved GIF\n    fetchSavedGif();\n  });\n\n  $(\".clear\").on(\"click\", () => {\n    // Clear out GIF display\n    clearGif();\n  });\n};\n\n$(setEventListeners);\n// setEventListeners will run after the dom is fully loaded\n// it adds all of our event listeners after we're sure the elements are on the page\n\n\n// ------------- GIF event handlers - fetchNew, save, fetchSaved, and clear ---------------\n\nconst fetchNewGif = () => {\n  // Initiate AJAX call to GIPHY API, take response and put on the DOM\n  GifApiUtil.newGifAJAX()\n    .then(response => {\n      let url = response.data.image_url;\n      appendGif(url);\n    })\n};\n\nconst saveGif = e => {\n  const $input = $('#save-gif-title');\n  const title = $input.val();\n  $input.val('');\n\n  // Initiate AJAX request to Rails backend, give a message if successful\n  // give an error if request was unsuccessful\n  let gifObj = {\n    url: $('.gif-display').data('url'),\n    title: title\n  }\n\n  const $messages = $('.messages');\n\n  let success = (response) => {\n    $messages.text(\"saved successfully!\");\n    setTimeout(() => $messages.empty(), 5000)\n  }\n  \n  let failure = (error) => {\n    $messages.text(error.responseJSON[0]);\n    setTimeout(() => $messages.empty(), 5000)\n  }\n\n  GifApiUtil.saveGifAJAX(gifObj)\n    .then(success, failure)\n    // .then(success)\n    // .fail(failure)\n};\n\nconst fetchSavedGif = () => {\n  const $input = $('#old-gif-query');\n  const title = $input.val();\n  $input.val('');\n\n  // Initate AJAX request to Rails backend, add GIF to the DOM if successful\n  // show errors if request was unsuccessful\n  GifApiUtil.fetchSavedGifAJAX(title)\n    .then(response => {\n      appendGif(response.url)\n    })\n    .fail(error => {\n      const $messages = $('.messages');\n      $messages.text(error.responseJSON[0]);\n      setTimeout(() => $messages.empty(), 5000)\n    })\n};\n\nconst clearGif = () => {\n  const $gifDisplay = $(\".gif-display\");\n  $gifDisplay.empty();\n  return $gifDisplay;\n};\n\n\n// ------------- Other helper functions ---------------\n\nconst appendGif = newGifURL => {\n  // Add gif to the display and keep track of its url\n  const $gifDisplay = $('.gif-display');\n  $gifDisplay.empty();\n\n  const $newImage = $(`<img class=\"gif\" src=\"${newGifURL}\">`);\n  $gifDisplay.data(\"url\", newGifURL);\n  $gifDisplay.append($newImage);\n};\n"],"sourceRoot":""}